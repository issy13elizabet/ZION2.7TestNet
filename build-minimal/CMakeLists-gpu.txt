cmake_minimum_required(VERSION 3.12)
project(zion-gpu-miner LANGUAGES CXX CUDA)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CUDA_STANDARD 17)
set(CMAKE_CUDA_STANDARD_REQUIRED ON)

# Find packages
find_package(OpenCL QUIET)
find_package(CUDA QUIET)

# Check GPU support
set(ZION_CUDA_SUPPORT OFF)
set(ZION_OPENCL_SUPPORT OFF)

if(CUDA_FOUND)
    set(ZION_CUDA_SUPPORT ON)
    message(STATUS "CUDA found - NVIDIA GPU support enabled")
else()
    message(STATUS "CUDA not found - NVIDIA GPU support disabled")
endif()

if(OpenCL_FOUND)
    set(ZION_OPENCL_SUPPORT ON)
    message(STATUS "OpenCL found - AMD GPU support enabled")
else()
    message(STATUS "OpenCL not found - AMD GPU support disabled")
endif()

# Base source files
set(ZION_SOURCES
    ../src/main/zion-gpu-ui.cpp
    ../src/gpu/zion-gpu-miner.cpp
)

# CUDA sources (if available)
if(ZION_CUDA_SUPPORT)
    list(APPEND ZION_SOURCES ../src/gpu/zion-cuda-miner.cu)
endif()

# OpenCL sources (if available)
if(ZION_OPENCL_SUPPORT)
    list(APPEND ZION_SOURCES ../src/gpu/zion-opencl-miner.c)
endif()

# Create executable
add_executable(zion-gpu-miner ${ZION_SOURCES})

# Include directories
target_include_directories(zion-gpu-miner PRIVATE 
    ../src
    ../include
)

# Compile definitions
if(ZION_CUDA_SUPPORT)
    target_compile_definitions(zion-gpu-miner PRIVATE ZION_CUDA_SUPPORT)
endif()

if(ZION_OPENCL_SUPPORT)
    target_compile_definitions(zion-gpu-miner PRIVATE ZION_OPENCL_SUPPORT)
endif()

if(ZION_CUDA_SUPPORT OR ZION_OPENCL_SUPPORT)
    target_compile_definitions(zion-gpu-miner PRIVATE ZION_GPU_SUPPORT)
endif()

# Link libraries
if(ZION_CUDA_SUPPORT)
    target_link_libraries(zion-gpu-miner PRIVATE 
        ${CUDA_LIBRARIES}
        ${CUDA_CUDART_LIBRARY}
    )
    
    # CUDA-specific compiler flags
    set_target_properties(zion-gpu-miner PROPERTIES
        CUDA_SEPARABLE_COMPILATION ON
        CUDA_ARCHITECTURES "60;61;70;75;80;86" # Support RTX and GTX series
    )
endif()

if(ZION_OPENCL_SUPPORT)
    target_link_libraries(zion-gpu-miner PRIVATE OpenCL::OpenCL)
endif()

# Windows-specific settings
if(WIN32)
    target_compile_definitions(zion-gpu-miner PRIVATE 
        _WIN32_WINNT=0x0A00
        NOMINMAX
        WIN32_LEAN_AND_MEAN
    )
    
    target_link_libraries(zion-gpu-miner PRIVATE
        kernel32
        user32
    )
endif()

# Compiler-specific optimizations
if(MSVC)
    target_compile_options(zion-gpu-miner PRIVATE 
        /O2 /GL /favor:AMD64
    )
    set_target_properties(zion-gpu-miner PROPERTIES
        LINK_FLAGS "/LTCG"
    )
else()
    target_compile_options(zion-gpu-miner PRIVATE 
        -O3 -march=native -mtune=native
    )
endif()

# Set output directory
set_target_properties(zion-gpu-miner PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin"
)

# Print configuration summary
message(STATUS "")
message(STATUS "===== ZION GPU Miner Configuration =====")
message(STATUS "CUDA Support: ${ZION_CUDA_SUPPORT}")
message(STATUS "OpenCL Support: ${ZION_OPENCL_SUPPORT}")
message(STATUS "Build Type: ${CMAKE_BUILD_TYPE}")
message(STATUS "C++ Standard: ${CMAKE_CXX_STANDARD}")
if(ZION_CUDA_SUPPORT)
    message(STATUS "CUDA Architectures: ${CMAKE_CUDA_ARCHITECTURES}")
endif()
message(STATUS "Output Directory: ${CMAKE_BINARY_DIR}/bin")
message(STATUS "=========================================")
message(STATUS "")

# Create simple CPU-only version as fallback
add_executable(zion-cpu-miner
    ../src/main/zion-minimal-ui.cpp
)

target_include_directories(zion-cpu-miner PRIVATE ../src)

if(WIN32)
    target_compile_definitions(zion-cpu-miner PRIVATE 
        _WIN32_WINNT=0x0A00
        NOMINMAX
        WIN32_LEAN_AND_MEAN
    )
    
    target_link_libraries(zion-cpu-miner PRIVATE
        kernel32
        user32
    )
endif()

set_target_properties(zion-cpu-miner PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin"
)