cmake_minimum_required(VERSION 3.20)
project(ZionHybridMiner VERSION 1.1.0 LANGUAGES CXX)

# C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Platform-specific settings
if(WIN32)
    add_definitions(-DWIN32_LEAN_AND_MEAN)
    add_definitions(-DNOMINMAX)
    set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()

# Find packages for GPU support
find_package(OpenCL QUIET)
find_package(CUDA QUIET)

# Include directories
include_directories(src/mining)

# Source files
set(MINING_SOURCES
    src/mining/zion-simple-miner.cpp
    src/mining/zion-gpu-miner.cpp
)

set(HYBRID_MAIN_SOURCES
    src/main/zion-hybrid-test.cpp
)

set(SIMPLE_MAIN_SOURCES
    src/main/zion-test-main.cpp
)

# Create hybrid mining executable (CPU + GPU)
add_executable(zion-hybrid-test
    ${MINING_SOURCES}
    ${HYBRID_MAIN_SOURCES}
)

# Create simple CPU-only executable
add_executable(zion-simple-test
    src/mining/zion-simple-miner.cpp
    ${SIMPLE_MAIN_SOURCES}
)

# Platform-specific linking
if(WIN32)
    target_link_libraries(zion-hybrid-test ws2_32)
    target_link_libraries(zion-simple-test ws2_32)
else()
    target_link_libraries(zion-hybrid-test pthread)
    target_link_libraries(zion-simple-test pthread)
endif()

# OpenCL support if available
if(OpenCL_FOUND)
    target_link_libraries(zion-hybrid-test ${OpenCL_LIBRARIES})
    target_include_directories(zion-hybrid-test PRIVATE ${OpenCL_INCLUDE_DIRS})
    target_compile_definitions(zion-hybrid-test PRIVATE OPENCL_SUPPORT=1)
    message(STATUS "‚úÖ OpenCL support enabled")
else()
    target_compile_definitions(zion-hybrid-test PRIVATE OPENCL_SUPPORT=0)
    message(STATUS "‚ö†Ô∏è OpenCL not found - GPU mining will use simulation mode")
endif()

# CUDA support if available
if(CUDA_FOUND)
    enable_language(CUDA)
    target_link_libraries(zion-hybrid-test ${CUDA_LIBRARIES})
    target_include_directories(zion-hybrid-test PRIVATE ${CUDA_INCLUDE_DIRS})
    target_compile_definitions(zion-hybrid-test PRIVATE CUDA_SUPPORT=1)
    message(STATUS "‚úÖ CUDA support enabled")
else()
    target_compile_definitions(zion-hybrid-test PRIVATE CUDA_SUPPORT=0)
    message(STATUS "‚ö†Ô∏è CUDA not found - NVIDIA GPU mining will use simulation mode")
endif()

# Compiler-specific options
if(MSVC)
    target_compile_options(zion-hybrid-test PRIVATE /W3)
    target_compile_options(zion-simple-test PRIVATE /W3)
else()
    target_compile_options(zion-hybrid-test PRIVATE -Wall -Wextra -O3)
    target_compile_options(zion-simple-test PRIVATE -Wall -Wextra -O3)
endif()

# Set output directory
set_target_properties(zion-hybrid-test PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_BINARY_DIR}/bin
    RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR}/bin
)

set_target_properties(zion-simple-test PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_BINARY_DIR}/bin
    RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR}/bin
)

# Copy OpenCL kernels to build directory
if(EXISTS "${CMAKE_SOURCE_DIR}/src/mining/zion-cosmic-harmony.cl")
    configure_file(
        "${CMAKE_SOURCE_DIR}/src/mining/zion-cosmic-harmony.cl"
        "${CMAKE_BINARY_DIR}/bin/zion-cosmic-harmony.cl"
        COPYONLY
    )
endif()

message(STATUS "")
message(STATUS "üèÜ === ZION HYBRID MINER CONFIGURATION ===")
message(STATUS "‚úÖ CPU Mining: Enabled")
message(STATUS "${OpenCL_FOUND}   GPU Mining (OpenCL): ${OpenCL_FOUND}")
message(STATUS "${CUDA_FOUND}   GPU Mining (CUDA): ${CUDA_FOUND}")
message(STATUS "üéØ Targets:")
message(STATUS "   - zion-hybrid-test (CPU + GPU)")
message(STATUS "   - zion-simple-test (CPU only)")
message(STATUS "üîß C++ Standard: ${CMAKE_CXX_STANDARD}")
message(STATUS "üñ•Ô∏è Platform: ${CMAKE_SYSTEM_NAME}")
message(STATUS "üöÄ AI-Enhanced Cosmic Harmony Algorithm: Enabled")
message(STATUS "üíù Auto-Donate System: 5% Active")
message(STATUS "===========================================")