cmake_minimum_required(VERSION 3.16)
project(ZionXMRigStyle)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Compiler-specific options
if(MSVC)
    add_compile_options(/W3 /bigobj)
else()
    add_compile_options(-Wall -Wextra -O3)
endif()

# Include directories
include_directories(src/mining src/network src/algorithms)

# Core mining sources
set(MINING_SOURCES
    src/mining/zion-simple-miner.cpp
    src/algorithms/zion-cosmic-harmony.cpp
)

# GPU mining sources (optional)
set(GPU_SOURCES
    src/mining/zion-gpu-miner.cpp
)

# Network sources
set(NETWORK_SOURCES
    src/network/pool-connection.cpp
)

# Try to find OpenCL
find_package(OpenCL QUIET)
if(OpenCL_FOUND)
    add_definitions(-DHAVE_OPENCL)
    set(GPU_LIBRARIES ${OpenCL_LIBRARIES})
    set(GPU_INCLUDE_DIRS ${OpenCL_INCLUDE_DIRS})
    message(STATUS "OpenCL found - GPU mining enabled")
else()
    message(STATUS "OpenCL not found - GPU mining will use simulation mode")
    set(GPU_LIBRARIES "")
    set(GPU_INCLUDE_DIRS "")
endif()

# Try to find CUDA
find_package(CUDA QUIET)
if(CUDA_FOUND)
    add_definitions(-DHAVE_CUDA)
    enable_language(CUDA)
    message(STATUS "CUDA found - NVIDIA GPU acceleration enabled")
endif()

# XMRig-Style UI Executable
add_executable(zion-xmrig-ui
    src/main/zion-xmrig-style.cpp
    ${MINING_SOURCES}
    ${GPU_SOURCES}
    ${NETWORK_SOURCES}
)

# Link libraries for XMRig-style UI
target_link_libraries(zion-xmrig-ui ${GPU_LIBRARIES})
if(GPU_INCLUDE_DIRS)
    target_include_directories(zion-xmrig-ui PRIVATE ${GPU_INCLUDE_DIRS})
endif()

# Windows specific libraries
if(WIN32)
    target_link_libraries(zion-xmrig-ui ws2_32 winmm)
endif()

# Set output directory
set_target_properties(zion-xmrig-ui PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin
)

# Copy OpenCL kernel files to output directory
if(EXISTS ${CMAKE_SOURCE_DIR}/src/mining/zion-cosmic-harmony.cl)
    configure_file(
        ${CMAKE_SOURCE_DIR}/src/mining/zion-cosmic-harmony.cl
        ${CMAKE_BINARY_DIR}/bin/zion-cosmic-harmony.cl
        COPYONLY
    )
endif()

# Print configuration summary
message(STATUS "")
message(STATUS "===== ZION XMRig-Style Miner Configuration =====")
message(STATUS "OpenCL Support: ${OpenCL_FOUND}")
message(STATUS "CUDA Support: ${CUDA_FOUND}")
message(STATUS "Build Type: ${CMAKE_BUILD_TYPE}")
message(STATUS "C++ Standard: ${CMAKE_CXX_STANDARD}")
message(STATUS "Output Directory: ${CMAKE_BINARY_DIR}/bin")
message(STATUS "===============================================")
message(STATUS "")