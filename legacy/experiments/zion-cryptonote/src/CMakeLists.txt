add_definitions(-DSTATICLIB)

file(GLOB_RECURSE BlockchainExplorer BlockchainExplorer/*)
file(GLOB_RECURSE Common Common/*.cpp)
file(GLOB_RECURSE ConnectivityTool ConnectivityTool/*)
file(GLOB_RECURSE Crypto crypto/*)
file(GLOB_RECURSE CryptoNoteCore CryptoNoteCore/* CryptoNoteConfig.h)
file(GLOB_RECURSE CryptoNoteProtocol CryptoNoteProtocol/*)
file(GLOB_RECURSE Daemon Daemon/*)
file(GLOB_RECURSE Http HTTP/*)
file(GLOB_RECURSE InProcessNode InProcessNode/*)
file(GLOB_RECURSE Logging Logging/*)
file(GLOB_RECURSE NodeRpcProxy NodeRpcProxy/*)
file(GLOB_RECURSE P2p P2p/*)
file(GLOB_RECURSE Rpc Rpc/*)
file(GLOB_RECURSE Serialization Serialization/*.cpp)
file(GLOB_RECURSE SimpleWallet SimpleWallet/*)
if(MSVC)
file(GLOB_RECURSE System System/* Platform/Windows/System/*)
elseif(APPLE)
file(GLOB_RECURSE System System/* Platform/OSX/System/*)
else()
file(GLOB_RECURSE System System/* Platform/Linux/System/*)
endif()
file(GLOB_RECURSE Transfers Transfers/*)
file(GLOB_RECURSE Wallet Wallet/*)
file(GLOB_RECURSE WalletLegacy WalletLegacy/*)

file(GLOB_RECURSE JsonRpcServer JsonRpcServer/*)

file(GLOB_RECURSE PaymentGate PaymentGate/*)
file(GLOB_RECURSE PaymentGateService PaymentGateService/*)
file(GLOB_RECURSE Miner Miner/*)

source_group("" FILES ${Common} ${ConnectivityTool} ${Crypto} ${CryptoNoteCore} ${CryptoNoteProtocol} ${Daemon} ${JsonRpcServer} ${Http} ${Logging} ${NodeRpcProxy} ${P2p} ${Rpc} ${Serialization} ${SimpleWallet} ${System} ${Transfers} ${Wallet} ${WalletLegacy})

add_library(BlockchainExplorer ${BlockchainExplorer})
add_library(Common ${Common})
add_library(Crypto ${Crypto})
add_library(CryptoNoteCore ${CryptoNoteCore})
add_library(Http ${Http})
add_library(InProcessNode ${InProcessNode})
add_library(Logging ${Logging})
add_library(NodeRpcProxy ${NodeRpcProxy})
add_library(Rpc ${Rpc})
add_library(P2P ${CryptoNoteProtocol} ${P2p})
add_library(Serialization ${Serialization})
# Ensure Serialization can resolve symbols from Common (e.g., StreamTools::read/write)
target_link_libraries(Serialization PUBLIC Common)
add_library(System ${System})
add_library(Transfers ${Transfers})
add_library(Wallet ${Wallet} ${WalletLegacy})
add_library(PaymentGate ${PaymentGate})
add_library(JsonRpcServer ${JsonRpcServer})

add_executable(ConnectivityTool ${ConnectivityTool})
add_executable(Daemon ${Daemon})
add_executable(SimpleWallet ${SimpleWallet})
add_executable(PaymentGateService ${PaymentGateService})
add_executable(Miner ${Miner})

if (MSVC)
  target_link_libraries(System ws2_32)
endif ()

# Link order matters for static libs; place Serialization before Common so Common resolves undefineds from Serialization
target_link_libraries(ConnectivityTool 
  -Wl,--start-group 
  Serialization Common CryptoNoteCore Logging Crypto P2P Rpc Http System ${Boost_LIBRARIES}
  -Wl,--end-group
)
target_link_libraries(Daemon CryptoNoteCore P2P Rpc Serialization System Http Logging Common Crypto BlockchainExplorer ${Boost_LIBRARIES})
if (TARGET upnpc-static)
  target_link_libraries(Daemon upnpc-static)
else()
  # Fallback to system miniupnpc if vendored static lib is not available
  find_library(MINIUPNPC_LIBRARY NAMES miniupnpc)
  if (MINIUPNPC_LIBRARY)
    target_link_libraries(Daemon ${MINIUPNPC_LIBRARY})
  endif()
endif()
target_link_libraries(SimpleWallet Wallet NodeRpcProxy Transfers Rpc Http Serialization CryptoNoteCore System Logging Common Crypto ${Boost_LIBRARIES})
target_link_libraries(PaymentGateService PaymentGate JsonRpcServer Wallet NodeRpcProxy Transfers CryptoNoteCore Crypto P2P Rpc Http Serialization System Logging Common InProcessNode BlockchainExplorer ${Boost_LIBRARIES})
if (TARGET upnpc-static)
  target_link_libraries(PaymentGateService upnpc-static)
else()
  # Fallback to system miniupnpc if vendored static lib is not available
  find_library(MINIUPNPC_LIBRARY NAMES miniupnpc)
  if (MINIUPNPC_LIBRARY)
    target_link_libraries(PaymentGateService ${MINIUPNPC_LIBRARY})
  endif()
endif()
target_link_libraries(Miner CryptoNoteCore Rpc Serialization System Http Logging Common Crypto ${Boost_LIBRARIES})

add_dependencies(Rpc version)

add_dependencies(ConnectivityTool version)
add_dependencies(Daemon version)
add_dependencies(SimpleWallet version)
add_dependencies(PaymentGateService version)
add_dependencies(P2P version)

set_property(TARGET ConnectivityTool PROPERTY OUTPUT_NAME "zion_connectivity_tool")
set_property(TARGET SimpleWallet PROPERTY OUTPUT_NAME "zion_wallet")
set_property(TARGET PaymentGateService PROPERTY OUTPUT_NAME "zion_walletd")
set_property(TARGET Miner PROPERTY OUTPUT_NAME "zion_miner")
# zion daemon binary name
set_property(TARGET Daemon PROPERTY OUTPUT_NAME "ziond")
